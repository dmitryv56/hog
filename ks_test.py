#!/usr/bin/python3


from scipy.stats import ks_2samp
import numpy as np


class ks_gofit(object):
    """

    """

    def __init__(self,  n1, n2 , f = None, dbg_prn = None ):

        self._f = f
        self._dbg_prn = dbg_prn
        self._c_alfa={ 0.10:1.22,0.05:1.36, 0.025:1.48, 0.01:1.63, 0.005:1.73,0.001:1.95 }
        self._sample1 = None
        self._sample2 = None
        self._n1 = n1
        self._n2 = n2
        self._ks = 0.0
        self._pvalue = 0.0
        self._alfa = 0.05    # significant level
        self._cv = 0.0
        self._crit_value()   # crit value


    def setSignLevel(self, alfa):
        self._alfa = alfa
        self._cv=self._critical_value()

    def getTestResult(self):

        self._ks, self._pvalue = ks_2samp(self._sample1,self._sample2)
        bret=True
        if self._ks > self._cv:
            bret = False

        return bret, self._ks, self._pvalue, self._cv, self._alfa


    def _crit_value(self):

        """
        critical value is c(alfa) * sqrt ( (n1+n2) / ( n1*n2) )
        :return:
        """
        try:
            sqN=np.sqrt( (self._n1 + self._n2) / (self._n1 * self._n2) )
        except Exception as e:
            sqN = 0.125  # for n1=n2=128
            print("###Exception when critical value is calculating :{} The factor sqrt(n1+n2/n1n2) is set {} for 128".format(e, sqN))
            if self._f:
                print("###Exception when critical value is calculating :{}. The factor sqrt(n1+n2/n1n2) is set {} for 128".format(e, sqN), file = self._f)




        try:
            ca = self._c_alfa[self._alfa]
        except Exception as e:
            ca = 1.36 # for alfa=0.05
            print("###Exception {}\n. No  c({}) is selected:{} The c(alfa) is set {} for 0.05".format(e,self._alfa))
            if self._f:
                print(
                    "###Exception {}\n. No  c({}) is selected:{} The c(alfa) is set {} for 0.05".format(e, self._alfa), file = self._f )

        finally:
            pass

        self._cv = ca*sqN

        pass

    def setSample(self, sample, N, index ):
        if index == 1:
            self._n1=N
            self._sample1 = sample
        elif index == 2:
            self._n2=N
            self._sample2 = sample

        self._crit_value()

class fvect_match( ks_gofit ):

    def __init__(self, ssample1, ssample2,  f = None, dbg_prn = None):

        super().__init__( len(ssample1), len(ssample2) , f , dbg_prn )
        self._sstr1=ssample1;
        self._sstr2=ssample2;


    def fvect2Array(self, index):

        if index==1:
            sample=np.zeros(len(self._sstr1))
            s=self._sstr1
        elif index==2:
            sample = np.zeros(len(self._sstr2))
            s = self._sstr2
        k=0
        for i, j in zip( s[::2], s[1::2]):

            sample[k] = int( i + j, 16 )
            k+=1

        self.setSample( sample, len(s)/2, index )

if __name__ == "__main__":

    x=np.random.normal(0,1,1000 )
    y=np.random.normal(0,1,1000 )



    s1="330408101D0A0000017263243D3A04000000342E391F622400000140460B080C020000007365243E3B04000000020100008A3D00000341470B080C0200000000000000080200000002010000A64900000400000000A14D01000100000000090300000000000000020201000000000000A44E01000100000000A14F00000000000000020201000000000000020100000000000000A14F00000000000000A35100000000000000020100000001000001020100000500000000A25000000000000000A14F00000001000001020100000507000000000000000B000000009F4E00000002000000A14D00000207000000000000000B1609131B0400000000020000009848000002000000025A7A39171C150812190300000000000101124921100401000000024D69311318000000059A4C000000000001103F1C0D03010100030926561A060300000005A251000000000000027A4102000001000409285B1B06040000000000071D181C000000039E55020000000000018F5B04020100000000000926202504000001010000000000000002B574050301030203216439071B0B050001010100000000120C0C172B0C000000040304267442081F0C0100010FAD5B010200150E0E1B310E0000000200030A1C100401000100010FAB5A01020000000000647914050B0200030A1B10040100000000000000060B150000000084A01B060F010114154164271F29000000000000080E1C000000000000010007463E4C2A8430000101555E0F0B1002000000600000012A13000000010000001409000000A4B51D151F05000000000000011406000000020000002712010001000000001711030100000000086A21000000000000011C190B0003010000047A59140A0406050D265E6D0D03250000000118160A000301010304170905000305040C23515F0B0321010101669F3E02012B000000000401010000020000030402000108000000131E0B00000800000089CE290B09050200000204010001070C00000000000000110000007AB825090804010109143F2F1F1D4A11010001000000001833142C3C090000000002020C1B56402A2865130F31953201000000291023310700000000010202248E401E0802100C277A2901000000010108375C120000000101021C6D311706010100061041962D0B060100062A470E0000000100095339191002000100040A2A621D07040000000000081F1A1E0100063625100B010000000EB541442F010000000000000719161903000000010000000000000C9535372701000000107886160200000300000001000000000A07070D18060000000000117D8C170200000000040997470000000B08070E1B07000000010001050F090200000000040AAA5000000001000008338C4A0900010001040D0802000000000000000002050A010000072D7D410800000001010127C0400900000000000003060D000000000000000003000001020231EC4E0B030102050702070610580000012611000000010000001208000000EB00000105030201020100010103020201000B030303B253040206010000046A4D11090410030B0A1C14170E08070611122F1C1A120F000000023B2B0A0502020206122C340601120303090A1A0F0E0A0803050C19188380555E01010207111402000700000016220D0000090102040909323120240B0829A8386033235A0000000E1608000006000000679A1F08070307051B6F253F22173B010007301B0C1F10090000005D8B1C0706030101060F30231716380100062B180B1C0F08000002091E212F7A440001050D291E141330090717471800000000000001081A1C28683B000000009D630902010907164617000000000100041F350A000000000000009A61080201060A2F654F310300000100041E320A0000000100063B29110C010006092C604B2E0300000A162664971E0000010000052E1F0D09010000000C99373928010008111E4E761700000100000007522300000000000B8C323424000000000F717F15020000000000074B200000000000001324170300000000107785160200000000030990440000000000001426190300000108130B36180A03000000040AA44D0000000100000731884709000209150C3E1B0B03000B0402010000010100010000072C7A400800000001010126BB3E090A0402010000010100010000000001222C0B00000101022ACF450A03010105060206050E01000000000125310C030000000005225338FC00000205030301020100010103020201002700000000000000000000000000000000002C09201B4F3640281713102F317E4C48332C0B000709110C100A050E0B0E0B120307040604030A0B1D11100B0904060D1B1A918D5E6703020202040001000106020303020000000A0102040908302E1F220B08279F355A31225502000101000000000300000004452C16112A0A07259431552D1F4F0100094024112A160C000000044029151027000001112B2C1A0E14010008351E0E23120A0000020B25283A95540000010E2424160C110F1D71431802000003000001061517215630000000008252070200081141260E01000002060D1A2B813A01000100000000664105010004061F433420020000040A1422662E0100010000000B924801000004061D3D301E020000060E184061130000000000000A8642010000000000007946000000070F1A45681400000000000006481F00000000000000824B00000000000000784400000000000007512300000000000015271903000000000000874C000000000000009E490000000000001223160300000107110A3116090200000000008C400000000000000AB8260000000107110A32160902000903020000000101000000000ABD270000000000021180520D00010C040201000001010001000000000127330C00000216A269110101000001015E6D20070101000000000129350D030001000106265A3D000001016271210701000002037E400D13339900000000010201010200010202010201019B0000000303030101000000010304040204030002030503050301040304030600020101000001060A0D0C050A0202010000002A98BC04030403050002010109020405030000010E0202010000002792B80905091D16130C0C080501020202000000080000000BAE6F392D6B050305130F0C0706040000000418231405050000000987562C2353000003265A5C381E2A00000003131B0F0404010102071720110308000002183B3C24131B1831B96E2804000006000001050F140B0205240C0100000D0703030C196039140200000309132740C0560200021306000000060402010E0300000000000000060C1A2B813A0100010000000EB85B0200000902000000000000000000000000040100000000000DA65202000000000000975700000000000000000301000000000000000001000000000000A25E00000000000000965500000000000000000001000000000001020301000000000000945300000000000000AD4F0000000000000102030100000000030B03000000000000000092430000000000000AC1280000000000030A03000000000000000000000000000000000AC2290000000000021283550D000100000000000000000002020904000000000000000317A66C11010100000101607020070102030C06000000000001000201010615120D000001016E7F250801000002048D480F163901000201010718140F00000000010506143D570000000102010000000000010102020101612401007D2F000000000000009237010000000000010202020102000000000000071C2300000000923700000000000000918219080400000000000006181E010001050303020201000000007F71160704000100064C6E21276F01010105030302020100000001060A060101010200075177232A780201023A912200000000000001070B080201000001030A0C07010303010241A526000000000103128A6C08000000000003090B070103160901000006040202000003117E63080000192E2A455B871200000F06000000050301010B0300000000000000111E1D2F415E0C00000500000AA2704131120C03000000000000000000000000050100000500000AA57242311201000009544F3218040000000001090300000000000001000201000200000F9088582907010000076E3100000000000000010104020101020204090B0501000100010A9E4700000000000003AB47000001000101020506030100000007180701010000000000026B2D00000103002871BA270000000000030B0300000000000000000000000000020013385C1300000000000000DF3400000000000000000000000001020904000000000000000000B42A00000000000000A53E00000002020A040000000000010002010105110E0B00000000B043000000000000019E3F00000001000201010613100C00000000000405103000000001AF460000000000000B832700175268260100843200000000000000993A000000420000000000000000010000000000000000000000009438000000000000009384190804000000000000000000010001000001020505000000007D6F150704000100064B6C21266D0100000000000204040201020203021A202E010100064D71222872020102378A200000000201020203021C22310F0E161B0B020000000301023FA02500000000000312866908000010101B210D02000000000205081E1502010400000310775E070000182B2841567F110000000104071A130201041D1A371D0C06010000111E1C2E405C0C00000500000A9F6D4030121412261509040100000100000000020201000500000995673B2C11010000084C472D1503010000000002020100000000000E6B170000010000084D472C1503000000043A1A000000000000000E6B1700000000000012B32C0000000000033919000000000000013C1A0000000000000011AD2A000000000102289122040400000001481E00000002001A4C7E1A0000000000010330AF290405000001020408080C0D020013375A1300000000000000DC330000000000010103060608092B010000000000000000000000B22900000000000000A33E00000023010000000000000008010102080602000000000000B043000000000000019E3F00000008010103090602000000000001100500000000000001B0460000000000000B842700175300000001120500000000000000120700002A"


    s





    ks=fvect_match(s1,s1)

    ks.fvect2Array(1)
    ks.fvect2Array(2)

    bret, cv, pv,crv, alfa = ks.getTestResult()

    pass


